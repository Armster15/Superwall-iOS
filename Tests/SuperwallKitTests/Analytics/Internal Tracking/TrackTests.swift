//
//  File.swift
//  
//
//  Created by Yusuf TÃ¶r on 10/03/2023.
//
// swiftlint:disable all

import XCTest
@testable import SuperwallKit

final class TrackingTests: XCTestCase {
  func test_userInitiatedEvent() async {
    let eventName = "MyEvent"
    let result = await Superwall.shared.track(UserInitiatedEvent.Track(
      rawName: eventName,
      canImplicitlyTriggerPaywall: false,
      isFeatureGatable: false
    ))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertFalse(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertFalse(result.parameters.eventParams["$is_feature_gatable"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, eventName)
  }

  func test_appOpen() async {
    let result = await Superwall.shared.track(InternalSuperwallEvent.AppOpen())
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "app_open")
  }

  func test_appInstall() async {
    let appInstalledAtString = "now"
    let result = await Superwall.shared.track(InternalSuperwallEvent.AppInstall(appInstalledAtString: appInstalledAtString))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "app_install")
    XCTAssertEqual(result.parameters.eventParams["$application_installed_at"] as! String, appInstalledAtString)
  }

  func test_appLaunch() async {
    let result = await Superwall.shared.track(InternalSuperwallEvent.AppLaunch())
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "app_launch")
  }

  func test_attributes() async {
    let appInstalledAtString = "now"
    let result = await Superwall.shared.track(InternalSuperwallEvent.Attributes(appInstalledAtString: appInstalledAtString))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "user_attributes")
    XCTAssertEqual(result.parameters.eventParams["$application_installed_at"] as! String, appInstalledAtString)
  }

  func test_deepLink() async {
    let url = URL(string: "http://superwall.com/test?query=value#fragment")!
    let result = await Superwall.shared.track(InternalSuperwallEvent.DeepLink(url: url))
    // "$app_session_id": "B993FB6C-556D-47E0-ADFE-E2E43365D732", "$is_standard_event": false, "$event_name": ""
    print(result)
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "deepLink_open")
    XCTAssertEqual(result.parameters.eventParams["$url"] as! String, url.absoluteString)
    XCTAssertEqual(result.parameters.eventParams["$path"] as! String, url.path)
    XCTAssertEqual(result.parameters.eventParams["$pathExtension"] as! String, url.pathExtension)
    XCTAssertEqual(result.parameters.eventParams["$lastPathComponent"] as! String, url.lastPathComponent)
    XCTAssertEqual(result.parameters.eventParams["$host"] as! String, url.host!)
    XCTAssertEqual(result.parameters.eventParams["$query"] as! String, url.query!)
    XCTAssertEqual(result.parameters.eventParams["$fragment"] as! String, url.fragment!)
  }

  func test_firstSeen() async {
    let result = await Superwall.shared.track(InternalSuperwallEvent.FirstSeen())
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "first_seen")
  }

  func test_appClose() async {
    let result = await Superwall.shared.track(InternalSuperwallEvent.AppClose())
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "app_close")
  }

  func test_sessionStart() async {
    let result = await Superwall.shared.track(InternalSuperwallEvent.SessionStart())
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "session_start")
  }

  func test_paywallLoad_start() async {
    let eventName = "name"
    let params = ["hello":true]
    let eventData = EventData(
      name: eventName,
      parameters: JSON(params),
      createdAt: Date()
    )
    let result = await Superwall.shared.track(InternalSuperwallEvent.PaywallLoad(state: .start, eventData: eventData))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "paywallResponseLoad_start")
    XCTAssertTrue(result.parameters.eventParams["$is_triggered_from_event"] as! Bool)
  }

  func test_paywallLoad_fail() async {
    let eventName = "name"
    let params = ["hello":true]
    let eventData = EventData(
      name: eventName,
      parameters: JSON(params),
      createdAt: Date()
    )
    let result = await Superwall.shared.track(InternalSuperwallEvent.PaywallLoad(state: .fail, eventData: eventData))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "paywallResponseLoad_fail")
    XCTAssertTrue(result.parameters.eventParams["$is_triggered_from_event"] as! Bool)
  }

  func test_paywallLoad_notFound() async {
    let eventName = "name"
    let params = ["hello":true]
    let eventData = EventData(
      name: eventName,
      parameters: JSON(params),
      createdAt: Date()
    )
    let result = await Superwall.shared.track(InternalSuperwallEvent.PaywallLoad(state: .notFound, eventData: eventData))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "paywallResponseLoad_notFound")
    XCTAssertTrue(result.parameters.eventParams["$is_triggered_from_event"] as! Bool)
  }

  func test_paywallLoad_complete() async {
    let eventName = "name"
    let params = ["hello":true]
    let eventData = EventData(
      name: eventName,
      parameters: JSON(params),
      createdAt: Date()
    )
    let paywallInfo = PaywallInfo.stub()
    let result = await Superwall.shared.track(InternalSuperwallEvent.PaywallLoad(state: .complete(paywallInfo: paywallInfo), eventData: eventData))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "paywallResponseLoad_complete")
    XCTAssertTrue(result.parameters.eventParams["$is_triggered_from_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$paywall_id"] as! String, paywallInfo.databaseId)
    XCTAssertEqual(result.parameters.eventParams["$paywalljs_version"] as? String, paywallInfo.paywalljsVersion)
    XCTAssertEqual(result.parameters.eventParams["$paywall_identifier"] as! String, paywallInfo.identifier)
    XCTAssertEqual(result.parameters.eventParams["$paywall_name"] as! String, paywallInfo.name)
    XCTAssertEqual(result.parameters.eventParams["$paywall_url"] as! String, paywallInfo.url.absoluteString)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_name"] as? String, paywallInfo.presentedByEventWithName)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_id"] as? String, paywallInfo.presentedByEventWithId)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_timestamp"] as? String, paywallInfo.presentedByEventAt)
    XCTAssertEqual(result.parameters.eventParams["$presented_by"] as! String, paywallInfo.presentedBy)
    XCTAssertEqual(result.parameters.eventParams["$paywall_product_ids"] as? String, paywallInfo.productIds.joined(separator: ","))
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_start_time"] as! String, paywallInfo.responseLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_complete_time"] as! String, paywallInfo.responseLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_duration"] as? TimeInterval, paywallInfo.responseLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_start_time"] as! String, paywallInfo.webViewLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_complete_time"] as! String, paywallInfo.webViewLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_duration"] as? TimeInterval, paywallInfo.webViewLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_start_time"] as! String, paywallInfo.productsLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_complete_time"] as! String, paywallInfo.productsLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_fail_time"] as! String, paywallInfo.productsLoadFailTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_duration"] as? TimeInterval, paywallInfo.productsLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$is_free_trial_available"] as! Bool, paywallInfo.isFreeTrialAvailable)
  }

  func test_subscriptionStatusDidChange_active() async {
    let result = await Superwall.shared.track(InternalSuperwallEvent.SubscriptionStatusDidChange(subscriptionStatus: .active))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "subscriptionStatus_didChange")
    XCTAssertEqual(result.parameters.eventParams["$subscription_status"] as! String, "ACTIVE")
  }

  func test_subscriptionStatusDidChange_inactive() async {
    let result = await Superwall.shared.track(InternalSuperwallEvent.SubscriptionStatusDidChange(subscriptionStatus: .inactive))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "subscriptionStatus_didChange")
    XCTAssertEqual(result.parameters.eventParams["$subscription_status"] as! String, "INACTIVE")
  }

  func test_triggerFire_noRuleMatch() async {
    let triggerName = "My Trigger"
    let dependencyContainer = DependencyContainer()
    let result = await Superwall.shared.track(InternalSuperwallEvent.TriggerFire(triggerResult: .noRuleMatch, triggerName: triggerName, sessionEventsManager: dependencyContainer.sessionEventsManager))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "trigger_fire")
    XCTAssertEqual(result.parameters.eventParams["$result"] as! String, "no_rule_match")
    XCTAssertEqual(result.parameters.eventParams["$trigger_name"] as! String, triggerName)
    // TODO: Missing test for trigger_session_id here. Need to figure out a way to activate it
  }

  func test_triggerFire_holdout() async {
    let triggerName = "My Trigger"
    let dependencyContainer = DependencyContainer()
    let experiment: Experiment = .stub()
    let result = await Superwall.shared.track(InternalSuperwallEvent.TriggerFire(triggerResult: .holdout(experiment), triggerName: triggerName, sessionEventsManager: dependencyContainer.sessionEventsManager))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "trigger_fire")
    XCTAssertEqual(result.parameters.eventParams["$trigger_name"] as! String, triggerName)
    XCTAssertEqual(result.parameters.eventParams["$result"] as! String, "holdout")
    XCTAssertEqual(result.parameters.eventParams["$trigger_name"] as! String, triggerName)
    XCTAssertEqual(result.parameters.eventParams["$variant_id"] as! String, experiment.variant.id)
    XCTAssertEqual(result.parameters.eventParams["$experiment_id"] as! String, experiment.id)
  }

  func test_triggerFire_paywall() async {
    let triggerName = "My Trigger"
    let dependencyContainer = DependencyContainer()
    let experiment: Experiment = .stub()
    let result = await Superwall.shared.track(InternalSuperwallEvent.TriggerFire(triggerResult: .paywall(experiment), triggerName: triggerName, sessionEventsManager: dependencyContainer.sessionEventsManager))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "trigger_fire")
    XCTAssertEqual(result.parameters.eventParams["$trigger_name"] as! String, triggerName)
    XCTAssertEqual(result.parameters.eventParams["$result"] as! String, "present")
    XCTAssertEqual(result.parameters.eventParams["$trigger_name"] as! String, triggerName)
    XCTAssertEqual(result.parameters.eventParams["$variant_id"] as! String, experiment.variant.id)
    XCTAssertEqual(result.parameters.eventParams["$paywall_identifier"] as! String, experiment.variant.paywallId)
    XCTAssertEqual(result.parameters.eventParams["$experiment_id"] as! String, experiment.id)
  }

  func test_triggerFire_eventNotFound() async {
    let triggerName = "My Trigger"
    let dependencyContainer = DependencyContainer()
    let result = await Superwall.shared.track(InternalSuperwallEvent.TriggerFire(triggerResult: .eventNotFound, triggerName: triggerName, sessionEventsManager: dependencyContainer.sessionEventsManager))
    print(result)
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$result"] as! String, "eventNotFound")
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "trigger_fire")
  }

  func test_triggerFire_error() async {
    let triggerName = "My Trigger"
    let dependencyContainer = DependencyContainer()
    let error = NSError(domain: "com.superwall", code: 400)
    let result = await Superwall.shared.track(InternalSuperwallEvent.TriggerFire(triggerResult: .error(error), triggerName: triggerName, sessionEventsManager: dependencyContainer.sessionEventsManager))
    print(result)
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$result"] as! String, "error")
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "trigger_fire")
  }

  func test_unableToPresent_userIsSubscribed() async {
    let result = await Superwall.shared.track(InternalSuperwallEvent.UnableToPresent(state: .userIsSubscribed))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "paywallPresentationFail_userIsSubscribed")
  }

  func test_unableToPresent_eventNotFound() async {
    let result = await Superwall.shared.track(InternalSuperwallEvent.UnableToPresent(state: .eventNotFound))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "paywallPresentationFail_eventNotFound")
  }

  func test_unableToPresent_noRuleMatch() async {
    let result = await Superwall.shared.track(InternalSuperwallEvent.UnableToPresent(state: .noRuleMatch))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "paywallPresentationFail_noRuleMatch")
  }

  func test_unableToPresent_alreadyPresented() async {
    let result = await Superwall.shared.track(InternalSuperwallEvent.UnableToPresent(state: .alreadyPresented))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "paywallPresentationFail_alreadyPresented")
  }

  func test_unableToPresent_debuggerLaunched() async {
    let result = await Superwall.shared.track(InternalSuperwallEvent.UnableToPresent(state: .debuggerLaunched))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "paywallPresentationFail_debuggerLaunched")
  }

  func test_unableToPresent_noPresenter() async {
    let result = await Superwall.shared.track(InternalSuperwallEvent.UnableToPresent(state: .noPresenter))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "paywallPresentationFail_noPresenter")
  }

  func test_unableToPresent_noPaywallViewController() async {
    let result = await Superwall.shared.track(InternalSuperwallEvent.UnableToPresent(state: .noPaywallViewController))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "paywallPresentationFail_noPaywallViewController")
  }

  func test_unableToPresent_holdout() async {
    let experiment: Experiment = .stub()
    let result = await Superwall.shared.track(InternalSuperwallEvent.UnableToPresent(state: .holdout(experiment)))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "paywallPresentationFail_holdout")
  }

  func test_paywallOpen() async {
    let paywallInfo: PaywallInfo = .stub()
    let result = await Superwall.shared.track(InternalSuperwallEvent.PaywallOpen(paywallInfo: paywallInfo))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)

    XCTAssertEqual(result.parameters.eventParams["$paywall_id"] as! String, paywallInfo.databaseId)
    XCTAssertEqual(result.parameters.eventParams["$paywalljs_version"] as? String, paywallInfo.paywalljsVersion)
    XCTAssertEqual(result.parameters.eventParams["$paywall_identifier"] as! String, paywallInfo.identifier)
    XCTAssertEqual(result.parameters.eventParams["$paywall_name"] as! String, paywallInfo.name)
    XCTAssertEqual(result.parameters.eventParams["$paywall_url"] as! String, paywallInfo.url.absoluteString)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_name"] as? String, paywallInfo.presentedByEventWithName)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_id"] as? String, paywallInfo.presentedByEventWithId)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_timestamp"] as? String, paywallInfo.presentedByEventAt)
    XCTAssertEqual(result.parameters.eventParams["$presented_by"] as! String, paywallInfo.presentedBy)
    XCTAssertEqual(result.parameters.eventParams["$paywall_product_ids"] as? String, paywallInfo.productIds.joined(separator: ","))
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_start_time"] as! String, paywallInfo.responseLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_complete_time"] as! String, paywallInfo.responseLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_duration"] as? TimeInterval, paywallInfo.responseLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_start_time"] as! String, paywallInfo.webViewLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_complete_time"] as! String, paywallInfo.webViewLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_duration"] as? TimeInterval, paywallInfo.webViewLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_start_time"] as! String, paywallInfo.productsLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_complete_time"] as! String, paywallInfo.productsLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_fail_time"] as! String, paywallInfo.productsLoadFailTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_duration"] as? TimeInterval, paywallInfo.productsLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$is_free_trial_available"] as! Bool, paywallInfo.isFreeTrialAvailable)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "paywall_open")
  }

  func test_paywallClose() async {
    let paywallInfo: PaywallInfo = .stub()
    let result = await Superwall.shared.track(InternalSuperwallEvent.PaywallClose(paywallInfo: paywallInfo))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)

    XCTAssertEqual(result.parameters.eventParams["$paywall_id"] as! String, paywallInfo.databaseId)
    XCTAssertEqual(result.parameters.eventParams["$paywalljs_version"] as? String, paywallInfo.paywalljsVersion)
    XCTAssertEqual(result.parameters.eventParams["$paywall_identifier"] as! String, paywallInfo.identifier)
    XCTAssertEqual(result.parameters.eventParams["$paywall_name"] as! String, paywallInfo.name)
    XCTAssertEqual(result.parameters.eventParams["$paywall_url"] as! String, paywallInfo.url.absoluteString)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_name"] as? String, paywallInfo.presentedByEventWithName)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_id"] as? String, paywallInfo.presentedByEventWithId)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_timestamp"] as? String, paywallInfo.presentedByEventAt)
    XCTAssertEqual(result.parameters.eventParams["$presented_by"] as! String, paywallInfo.presentedBy)
    XCTAssertEqual(result.parameters.eventParams["$paywall_product_ids"] as? String, paywallInfo.productIds.joined(separator: ","))
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_start_time"] as! String, paywallInfo.responseLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_complete_time"] as! String, paywallInfo.responseLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_duration"] as? TimeInterval, paywallInfo.responseLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_start_time"] as! String, paywallInfo.webViewLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_complete_time"] as! String, paywallInfo.webViewLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_duration"] as? TimeInterval, paywallInfo.webViewLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_start_time"] as! String, paywallInfo.productsLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_complete_time"] as! String, paywallInfo.productsLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_fail_time"] as! String, paywallInfo.productsLoadFailTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_duration"] as? TimeInterval, paywallInfo.productsLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$is_free_trial_available"] as! Bool, paywallInfo.isFreeTrialAvailable)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "paywall_close")
  }

  func test_transaction_start() async {
    let paywallInfo: PaywallInfo = .stub()
    let productId = "abc"
    let product = StoreProduct(sk1Product: MockSkProduct(productIdentifier: productId))
    let dependencyContainer = DependencyContainer()
    let skTransaction = MockSKPaymentTransaction(state: .purchased)
    let transaction = await dependencyContainer.makeStoreTransaction(from: skTransaction)
    let result = await Superwall.shared.track(InternalSuperwallEvent.Transaction(state: .start(product), paywallInfo: paywallInfo, product: product, model: transaction))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)

    XCTAssertEqual(result.parameters.eventParams["$paywall_id"] as! String, paywallInfo.databaseId)
    XCTAssertEqual(result.parameters.eventParams["$paywalljs_version"] as? String, paywallInfo.paywalljsVersion)
    XCTAssertEqual(result.parameters.eventParams["$paywall_identifier"] as! String, paywallInfo.identifier)
    XCTAssertEqual(result.parameters.eventParams["$paywall_name"] as! String, paywallInfo.name)
    XCTAssertEqual(result.parameters.eventParams["$paywall_url"] as! String, paywallInfo.url.absoluteString)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_name"] as? String, paywallInfo.presentedByEventWithName)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_id"] as? String, paywallInfo.presentedByEventWithId)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_timestamp"] as? String, paywallInfo.presentedByEventAt)
    XCTAssertEqual(result.parameters.eventParams["$presented_by"] as! String, paywallInfo.presentedBy)
    XCTAssertEqual(result.parameters.eventParams["$paywall_product_ids"] as? String, paywallInfo.productIds.joined(separator: ","))
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_start_time"] as! String, paywallInfo.responseLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_complete_time"] as! String, paywallInfo.responseLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_duration"] as? TimeInterval, paywallInfo.responseLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_start_time"] as! String, paywallInfo.webViewLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_complete_time"] as! String, paywallInfo.webViewLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_duration"] as? TimeInterval, paywallInfo.webViewLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_start_time"] as! String, paywallInfo.productsLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_complete_time"] as! String, paywallInfo.productsLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_fail_time"] as! String, paywallInfo.productsLoadFailTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_duration"] as? TimeInterval, paywallInfo.productsLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$is_free_trial_available"] as! Bool, paywallInfo.isFreeTrialAvailable)
    XCTAssertEqual(result.parameters.eventParams["$product_id"] as! String, productId)
    XCTAssertEqual(result.parameters.eventParams["$product_identifier"] as! String, productId)
    XCTAssertNotNil(result.parameters.eventParams["$product_raw_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_alt"])
    XCTAssertNotNil(result.parameters.eventParams["$product_localized_period"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period"])
    XCTAssertNotNil(result.parameters.eventParams["$product_periodly"])
    XCTAssertNotNil(result.parameters.eventParams["$product_weekly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_daily_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_monthly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_yearly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_days"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_weeks"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_months"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_years"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_text"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_end_date"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_days"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_weeks"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_months"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_years"])
    XCTAssertNotNil(result.parameters.eventParams["$product_locale"])
    XCTAssertNotNil(result.parameters.eventParams["$product_language_code"])
    XCTAssertNotNil(result.parameters.eventParams["$product_currency_code"])
    XCTAssertNotNil(result.parameters.eventParams["$product_currency_symbol"])
    XCTAssertNotNil(result.parameters.eventParams["$primary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$secondary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$tertiary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$original_transaction_identifier"])
    XCTAssertNotNil(result.parameters.eventParams["$config_request_id"])
    XCTAssertEqual(result.parameters.eventParams["$state"] as! String, "PURCHASED")
    XCTAssertNotNil(result.parameters.eventParams["$id"])
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "transaction_start")
  }

  func test_transaction_complete() async {
    let paywallInfo: PaywallInfo = .stub()
    let productId = "abc"
    let product = StoreProduct(sk1Product: MockSkProduct(productIdentifier: productId))
    let dependencyContainer = DependencyContainer()
    let skTransaction = MockSKPaymentTransaction(state: .purchased)
    let transaction = await dependencyContainer.makeStoreTransaction(from: skTransaction)
    let result = await Superwall.shared.track(InternalSuperwallEvent.Transaction(state: .complete(product, transaction), paywallInfo: paywallInfo, product: product, model: transaction))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)

    XCTAssertEqual(result.parameters.eventParams["$paywall_id"] as! String, paywallInfo.databaseId)
    XCTAssertEqual(result.parameters.eventParams["$paywalljs_version"] as? String, paywallInfo.paywalljsVersion)
    XCTAssertEqual(result.parameters.eventParams["$paywall_identifier"] as! String, paywallInfo.identifier)
    XCTAssertEqual(result.parameters.eventParams["$paywall_name"] as! String, paywallInfo.name)
    XCTAssertEqual(result.parameters.eventParams["$paywall_url"] as! String, paywallInfo.url.absoluteString)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_name"] as? String, paywallInfo.presentedByEventWithName)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_id"] as? String, paywallInfo.presentedByEventWithId)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_timestamp"] as? String, paywallInfo.presentedByEventAt)
    XCTAssertEqual(result.parameters.eventParams["$presented_by"] as! String, paywallInfo.presentedBy)
    XCTAssertEqual(result.parameters.eventParams["$paywall_product_ids"] as? String, paywallInfo.productIds.joined(separator: ","))
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_start_time"] as! String, paywallInfo.responseLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_complete_time"] as! String, paywallInfo.responseLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_duration"] as? TimeInterval, paywallInfo.responseLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_start_time"] as! String, paywallInfo.webViewLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_complete_time"] as! String, paywallInfo.webViewLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_duration"] as? TimeInterval, paywallInfo.webViewLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_start_time"] as! String, paywallInfo.productsLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_complete_time"] as! String, paywallInfo.productsLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_fail_time"] as! String, paywallInfo.productsLoadFailTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_duration"] as? TimeInterval, paywallInfo.productsLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$is_free_trial_available"] as! Bool, paywallInfo.isFreeTrialAvailable)
    XCTAssertEqual(result.parameters.eventParams["$product_id"] as! String, productId)
    XCTAssertEqual(result.parameters.eventParams["$product_identifier"] as! String, productId)
    XCTAssertNotNil(result.parameters.eventParams["$product_raw_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_alt"])
    XCTAssertNotNil(result.parameters.eventParams["$product_localized_period"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period"])
    XCTAssertNotNil(result.parameters.eventParams["$product_periodly"])
    XCTAssertNotNil(result.parameters.eventParams["$product_weekly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_daily_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_monthly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_yearly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_days"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_weeks"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_months"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_years"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_text"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_end_date"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_days"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_weeks"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_months"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_years"])
    XCTAssertNotNil(result.parameters.eventParams["$product_locale"])
    XCTAssertNotNil(result.parameters.eventParams["$product_language_code"])
    XCTAssertNotNil(result.parameters.eventParams["$product_currency_code"])
    XCTAssertNotNil(result.parameters.eventParams["$product_currency_symbol"])
    XCTAssertNotNil(result.parameters.eventParams["$primary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$secondary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$tertiary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$original_transaction_identifier"])
    XCTAssertNotNil(result.parameters.eventParams["$config_request_id"])
    XCTAssertEqual(result.parameters.eventParams["$state"] as! String, "PURCHASED")
    XCTAssertNotNil(result.parameters.eventParams["$id"])
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "transaction_complete")
  }

  func test_transaction_restore() async {
    let paywallInfo: PaywallInfo = .stub()
    let productId = "abc"
    let product = StoreProduct(sk1Product: MockSkProduct(productIdentifier: productId))
    let dependencyContainer = DependencyContainer()
    let skTransaction = MockSKPaymentTransaction(state: .purchased)
    let transaction = await dependencyContainer.makeStoreTransaction(from: skTransaction)
    let result = await Superwall.shared.track(InternalSuperwallEvent.Transaction(state: .restore, paywallInfo: paywallInfo, product: product, model: transaction))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)

    XCTAssertEqual(result.parameters.eventParams["$paywall_id"] as! String, paywallInfo.databaseId)
    XCTAssertEqual(result.parameters.eventParams["$paywalljs_version"] as? String, paywallInfo.paywalljsVersion)
    XCTAssertEqual(result.parameters.eventParams["$paywall_identifier"] as! String, paywallInfo.identifier)
    XCTAssertEqual(result.parameters.eventParams["$paywall_name"] as! String, paywallInfo.name)
    XCTAssertEqual(result.parameters.eventParams["$paywall_url"] as! String, paywallInfo.url.absoluteString)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_name"] as? String, paywallInfo.presentedByEventWithName)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_id"] as? String, paywallInfo.presentedByEventWithId)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_timestamp"] as? String, paywallInfo.presentedByEventAt)
    XCTAssertEqual(result.parameters.eventParams["$presented_by"] as! String, paywallInfo.presentedBy)
    XCTAssertEqual(result.parameters.eventParams["$paywall_product_ids"] as? String, paywallInfo.productIds.joined(separator: ","))
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_start_time"] as! String, paywallInfo.responseLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_complete_time"] as! String, paywallInfo.responseLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_duration"] as? TimeInterval, paywallInfo.responseLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_start_time"] as! String, paywallInfo.webViewLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_complete_time"] as! String, paywallInfo.webViewLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_duration"] as? TimeInterval, paywallInfo.webViewLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_start_time"] as! String, paywallInfo.productsLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_complete_time"] as! String, paywallInfo.productsLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_fail_time"] as! String, paywallInfo.productsLoadFailTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_duration"] as? TimeInterval, paywallInfo.productsLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$is_free_trial_available"] as! Bool, paywallInfo.isFreeTrialAvailable)
    XCTAssertEqual(result.parameters.eventParams["$product_id"] as! String, productId)
    XCTAssertEqual(result.parameters.eventParams["$product_identifier"] as! String, productId)
    XCTAssertNotNil(result.parameters.eventParams["$product_raw_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_alt"])
    XCTAssertNotNil(result.parameters.eventParams["$product_localized_period"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period"])
    XCTAssertNotNil(result.parameters.eventParams["$product_periodly"])
    XCTAssertNotNil(result.parameters.eventParams["$product_weekly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_daily_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_monthly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_yearly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_days"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_weeks"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_months"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_years"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_text"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_end_date"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_days"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_weeks"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_months"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_years"])
    XCTAssertNotNil(result.parameters.eventParams["$product_locale"])
    XCTAssertNotNil(result.parameters.eventParams["$product_language_code"])
    XCTAssertNotNil(result.parameters.eventParams["$product_currency_code"])
    XCTAssertNotNil(result.parameters.eventParams["$product_currency_symbol"])
    XCTAssertNotNil(result.parameters.eventParams["$primary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$secondary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$tertiary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$original_transaction_identifier"])
    XCTAssertNotNil(result.parameters.eventParams["$config_request_id"])
    XCTAssertEqual(result.parameters.eventParams["$state"] as! String, "PURCHASED")
    XCTAssertNotNil(result.parameters.eventParams["$id"])
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "transaction_restore")
  }

  func test_transaction_timeout() async {
    let paywallInfo: PaywallInfo = .stub()
    let productId = "abc"
    let product = StoreProduct(sk1Product: MockSkProduct(productIdentifier: productId))
    let dependencyContainer = DependencyContainer()
    let skTransaction = MockSKPaymentTransaction(state: .purchased)
    let transaction = await dependencyContainer.makeStoreTransaction(from: skTransaction)
    let result = await Superwall.shared.track(InternalSuperwallEvent.Transaction(state: .timeout, paywallInfo: paywallInfo, product: product, model: transaction))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)

    XCTAssertEqual(result.parameters.eventParams["$paywall_id"] as! String, paywallInfo.databaseId)
    XCTAssertEqual(result.parameters.eventParams["$paywalljs_version"] as? String, paywallInfo.paywalljsVersion)
    XCTAssertEqual(result.parameters.eventParams["$paywall_identifier"] as! String, paywallInfo.identifier)
    XCTAssertEqual(result.parameters.eventParams["$paywall_name"] as! String, paywallInfo.name)
    XCTAssertEqual(result.parameters.eventParams["$paywall_url"] as! String, paywallInfo.url.absoluteString)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_name"] as? String, paywallInfo.presentedByEventWithName)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_id"] as? String, paywallInfo.presentedByEventWithId)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_timestamp"] as? String, paywallInfo.presentedByEventAt)
    XCTAssertEqual(result.parameters.eventParams["$presented_by"] as! String, paywallInfo.presentedBy)
    XCTAssertEqual(result.parameters.eventParams["$paywall_product_ids"] as? String, paywallInfo.productIds.joined(separator: ","))
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_start_time"] as! String, paywallInfo.responseLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_complete_time"] as! String, paywallInfo.responseLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_duration"] as? TimeInterval, paywallInfo.responseLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_start_time"] as! String, paywallInfo.webViewLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_complete_time"] as! String, paywallInfo.webViewLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_duration"] as? TimeInterval, paywallInfo.webViewLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_start_time"] as! String, paywallInfo.productsLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_complete_time"] as! String, paywallInfo.productsLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_fail_time"] as! String, paywallInfo.productsLoadFailTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_duration"] as? TimeInterval, paywallInfo.productsLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$is_free_trial_available"] as! Bool, paywallInfo.isFreeTrialAvailable)
    XCTAssertEqual(result.parameters.eventParams["$product_id"] as! String, productId)
    XCTAssertEqual(result.parameters.eventParams["$product_identifier"] as! String, productId)
    XCTAssertNotNil(result.parameters.eventParams["$product_raw_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_alt"])
    XCTAssertNotNil(result.parameters.eventParams["$product_localized_period"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period"])
    XCTAssertNotNil(result.parameters.eventParams["$product_periodly"])
    XCTAssertNotNil(result.parameters.eventParams["$product_weekly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_daily_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_monthly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_yearly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_days"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_weeks"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_months"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_years"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_text"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_end_date"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_days"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_weeks"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_months"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_years"])
    XCTAssertNotNil(result.parameters.eventParams["$product_locale"])
    XCTAssertNotNil(result.parameters.eventParams["$product_language_code"])
    XCTAssertNotNil(result.parameters.eventParams["$product_currency_code"])
    XCTAssertNotNil(result.parameters.eventParams["$product_currency_symbol"])
    XCTAssertNotNil(result.parameters.eventParams["$primary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$secondary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$tertiary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$original_transaction_identifier"])
    XCTAssertNotNil(result.parameters.eventParams["$config_request_id"])
    XCTAssertEqual(result.parameters.eventParams["$state"] as! String, "PURCHASED")
    XCTAssertNotNil(result.parameters.eventParams["$id"])
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "transaction_timeout")
  }

  func test_transaction_fail() async {
    let paywallInfo: PaywallInfo = .stub()
    let productId = "abc"
    let product = StoreProduct(sk1Product: MockSkProduct(productIdentifier: productId))
    let dependencyContainer = DependencyContainer()
    let skTransaction = MockSKPaymentTransaction(state: .purchased)
    let transaction = await dependencyContainer.makeStoreTransaction(from: skTransaction)
    let error = TransactionError.failure("failed mate", product)
    let result = await Superwall.shared.track(InternalSuperwallEvent.Transaction(state: .fail(error), paywallInfo: paywallInfo, product: product, model: transaction))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)

    XCTAssertEqual(result.parameters.eventParams["$paywall_id"] as! String, paywallInfo.databaseId)
    XCTAssertEqual(result.parameters.eventParams["$paywalljs_version"] as? String, paywallInfo.paywalljsVersion)
    XCTAssertEqual(result.parameters.eventParams["$paywall_identifier"] as! String, paywallInfo.identifier)
    XCTAssertEqual(result.parameters.eventParams["$paywall_name"] as! String, paywallInfo.name)
    XCTAssertEqual(result.parameters.eventParams["$paywall_url"] as! String, paywallInfo.url.absoluteString)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_name"] as? String, paywallInfo.presentedByEventWithName)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_id"] as? String, paywallInfo.presentedByEventWithId)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_timestamp"] as? String, paywallInfo.presentedByEventAt)
    XCTAssertEqual(result.parameters.eventParams["$presented_by"] as! String, paywallInfo.presentedBy)
    XCTAssertEqual(result.parameters.eventParams["$paywall_product_ids"] as? String, paywallInfo.productIds.joined(separator: ","))
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_start_time"] as! String, paywallInfo.responseLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_complete_time"] as! String, paywallInfo.responseLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_duration"] as? TimeInterval, paywallInfo.responseLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_start_time"] as! String, paywallInfo.webViewLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_complete_time"] as! String, paywallInfo.webViewLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_duration"] as? TimeInterval, paywallInfo.webViewLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_start_time"] as! String, paywallInfo.productsLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_complete_time"] as! String, paywallInfo.productsLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_fail_time"] as! String, paywallInfo.productsLoadFailTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_duration"] as? TimeInterval, paywallInfo.productsLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$is_free_trial_available"] as! Bool, paywallInfo.isFreeTrialAvailable)
    XCTAssertEqual(result.parameters.eventParams["$product_id"] as! String, productId)
    XCTAssertEqual(result.parameters.eventParams["$product_identifier"] as! String, productId)
    XCTAssertNotNil(result.parameters.eventParams["$product_raw_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_alt"])
    XCTAssertNotNil(result.parameters.eventParams["$product_localized_period"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period"])
    XCTAssertNotNil(result.parameters.eventParams["$product_periodly"])
    XCTAssertNotNil(result.parameters.eventParams["$product_weekly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_daily_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_monthly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_yearly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_days"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_weeks"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_months"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_years"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_text"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_end_date"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_days"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_weeks"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_months"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_years"])
    XCTAssertNotNil(result.parameters.eventParams["$product_locale"])
    XCTAssertNotNil(result.parameters.eventParams["$product_language_code"])
    XCTAssertNotNil(result.parameters.eventParams["$product_currency_code"])
    XCTAssertNotNil(result.parameters.eventParams["$product_currency_symbol"])
    XCTAssertNotNil(result.parameters.eventParams["$primary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$secondary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$tertiary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertEqual(result.parameters.eventParams["$message"] as! String, "failed mate")
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "transaction_fail")
  }

  func test_subscriptionStart() async {
    let paywallInfo: PaywallInfo = .stub()
    let productId = "abc"
    let product = StoreProduct(sk1Product: MockSkProduct(productIdentifier: productId))
    let dependencyContainer = DependencyContainer()
    let skTransaction = MockSKPaymentTransaction(state: .purchased)
    let transaction = await dependencyContainer.makeStoreTransaction(from: skTransaction)
    let error = TransactionError.failure("failed mate", product)
    let result = await Superwall.shared.track(InternalSuperwallEvent.SubscriptionStart(paywallInfo: paywallInfo, product: product))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "subscription_start")
    XCTAssertEqual(result.parameters.eventParams["$paywall_id"] as! String, paywallInfo.databaseId)
    XCTAssertEqual(result.parameters.eventParams["$paywalljs_version"] as? String, paywallInfo.paywalljsVersion)
    XCTAssertEqual(result.parameters.eventParams["$paywall_identifier"] as! String, paywallInfo.identifier)
    XCTAssertEqual(result.parameters.eventParams["$paywall_name"] as! String, paywallInfo.name)
    XCTAssertEqual(result.parameters.eventParams["$paywall_url"] as! String, paywallInfo.url.absoluteString)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_name"] as? String, paywallInfo.presentedByEventWithName)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_id"] as? String, paywallInfo.presentedByEventWithId)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_timestamp"] as? String, paywallInfo.presentedByEventAt)
    XCTAssertEqual(result.parameters.eventParams["$presented_by"] as! String, paywallInfo.presentedBy)
    XCTAssertEqual(result.parameters.eventParams["$paywall_product_ids"] as? String, paywallInfo.productIds.joined(separator: ","))
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_start_time"] as! String, paywallInfo.responseLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_complete_time"] as! String, paywallInfo.responseLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_duration"] as? TimeInterval, paywallInfo.responseLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_start_time"] as! String, paywallInfo.webViewLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_complete_time"] as! String, paywallInfo.webViewLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_duration"] as? TimeInterval, paywallInfo.webViewLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_start_time"] as! String, paywallInfo.productsLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_complete_time"] as! String, paywallInfo.productsLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_fail_time"] as! String, paywallInfo.productsLoadFailTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_duration"] as? TimeInterval, paywallInfo.productsLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$is_free_trial_available"] as! Bool, paywallInfo.isFreeTrialAvailable)
    XCTAssertEqual(result.parameters.eventParams["$product_id"] as! String, productId)
    XCTAssertEqual(result.parameters.eventParams["$product_identifier"] as! String, productId)
    XCTAssertNotNil(result.parameters.eventParams["$product_raw_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_alt"])
    XCTAssertNotNil(result.parameters.eventParams["$product_localized_period"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period"])
    XCTAssertNotNil(result.parameters.eventParams["$product_periodly"])
    XCTAssertNotNil(result.parameters.eventParams["$product_weekly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_daily_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_monthly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_yearly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_days"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_weeks"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_months"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_years"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_text"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_end_date"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_days"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_weeks"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_months"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_years"])
    XCTAssertNotNil(result.parameters.eventParams["$product_locale"])
    XCTAssertNotNil(result.parameters.eventParams["$product_language_code"])
    XCTAssertNotNil(result.parameters.eventParams["$product_currency_code"])
    XCTAssertNotNil(result.parameters.eventParams["$product_currency_symbol"])
    XCTAssertNotNil(result.parameters.eventParams["$primary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$secondary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$tertiary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
  }

  func test_freeTrialStart() async {
    let paywallInfo: PaywallInfo = .stub()
    let productId = "abc"
    let product = StoreProduct(sk1Product: MockSkProduct(productIdentifier: productId))
    let dependencyContainer = DependencyContainer()
    let skTransaction = MockSKPaymentTransaction(state: .purchased)
    let transaction = await dependencyContainer.makeStoreTransaction(from: skTransaction)
    let error = TransactionError.failure("failed mate", product)
    let result = await Superwall.shared.track(InternalSuperwallEvent.FreeTrialStart(paywallInfo: paywallInfo, product: product))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "freeTrial_start")
    XCTAssertEqual(result.parameters.eventParams["$paywall_id"] as! String, paywallInfo.databaseId)
    XCTAssertEqual(result.parameters.eventParams["$paywalljs_version"] as? String, paywallInfo.paywalljsVersion)
    XCTAssertEqual(result.parameters.eventParams["$paywall_identifier"] as! String, paywallInfo.identifier)
    XCTAssertEqual(result.parameters.eventParams["$paywall_name"] as! String, paywallInfo.name)
    XCTAssertEqual(result.parameters.eventParams["$paywall_url"] as! String, paywallInfo.url.absoluteString)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_name"] as? String, paywallInfo.presentedByEventWithName)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_id"] as? String, paywallInfo.presentedByEventWithId)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_timestamp"] as? String, paywallInfo.presentedByEventAt)
    XCTAssertEqual(result.parameters.eventParams["$presented_by"] as! String, paywallInfo.presentedBy)
    XCTAssertEqual(result.parameters.eventParams["$paywall_product_ids"] as? String, paywallInfo.productIds.joined(separator: ","))
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_start_time"] as! String, paywallInfo.responseLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_complete_time"] as! String, paywallInfo.responseLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_duration"] as? TimeInterval, paywallInfo.responseLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_start_time"] as! String, paywallInfo.webViewLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_complete_time"] as! String, paywallInfo.webViewLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_duration"] as? TimeInterval, paywallInfo.webViewLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_start_time"] as! String, paywallInfo.productsLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_complete_time"] as! String, paywallInfo.productsLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_fail_time"] as! String, paywallInfo.productsLoadFailTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_duration"] as? TimeInterval, paywallInfo.productsLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$is_free_trial_available"] as! Bool, paywallInfo.isFreeTrialAvailable)
    XCTAssertEqual(result.parameters.eventParams["$product_id"] as! String, productId)
    XCTAssertEqual(result.parameters.eventParams["$product_identifier"] as! String, productId)
    XCTAssertNotNil(result.parameters.eventParams["$product_raw_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_alt"])
    XCTAssertNotNil(result.parameters.eventParams["$product_localized_period"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period"])
    XCTAssertNotNil(result.parameters.eventParams["$product_periodly"])
    XCTAssertNotNil(result.parameters.eventParams["$product_weekly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_daily_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_monthly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_yearly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_days"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_weeks"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_months"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_years"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_text"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_end_date"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_days"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_weeks"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_months"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_years"])
    XCTAssertNotNil(result.parameters.eventParams["$product_locale"])
    XCTAssertNotNil(result.parameters.eventParams["$product_language_code"])
    XCTAssertNotNil(result.parameters.eventParams["$product_currency_code"])
    XCTAssertNotNil(result.parameters.eventParams["$product_currency_symbol"])
    XCTAssertNotNil(result.parameters.eventParams["$primary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$secondary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$tertiary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
  }

  func test_nonRecurringProductPurchase() async {
    let paywallInfo: PaywallInfo = .stub()
    let productId = "abc"
    let product = StoreProduct(sk1Product: MockSkProduct(productIdentifier: productId))
    let dependencyContainer = DependencyContainer()
    let skTransaction = MockSKPaymentTransaction(state: .purchased)
    let transaction = await dependencyContainer.makeStoreTransaction(from: skTransaction)
    let error = TransactionError.failure("failed mate", product)
    let result = await Superwall.shared.track(InternalSuperwallEvent.NonRecurringProductPurchase(paywallInfo: paywallInfo, product: product))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "nonRecurringProduct_purchase")
    XCTAssertEqual(result.parameters.eventParams["$paywall_id"] as! String, paywallInfo.databaseId)
    XCTAssertEqual(result.parameters.eventParams["$paywalljs_version"] as? String, paywallInfo.paywalljsVersion)
    XCTAssertEqual(result.parameters.eventParams["$paywall_identifier"] as! String, paywallInfo.identifier)
    XCTAssertEqual(result.parameters.eventParams["$paywall_name"] as! String, paywallInfo.name)
    XCTAssertEqual(result.parameters.eventParams["$paywall_url"] as! String, paywallInfo.url.absoluteString)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_name"] as? String, paywallInfo.presentedByEventWithName)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_id"] as? String, paywallInfo.presentedByEventWithId)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_timestamp"] as? String, paywallInfo.presentedByEventAt)
    XCTAssertEqual(result.parameters.eventParams["$presented_by"] as! String, paywallInfo.presentedBy)
    XCTAssertEqual(result.parameters.eventParams["$paywall_product_ids"] as? String, paywallInfo.productIds.joined(separator: ","))
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_start_time"] as! String, paywallInfo.responseLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_complete_time"] as! String, paywallInfo.responseLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_duration"] as? TimeInterval, paywallInfo.responseLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_start_time"] as! String, paywallInfo.webViewLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_complete_time"] as! String, paywallInfo.webViewLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_duration"] as? TimeInterval, paywallInfo.webViewLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_start_time"] as! String, paywallInfo.productsLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_complete_time"] as! String, paywallInfo.productsLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_fail_time"] as! String, paywallInfo.productsLoadFailTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_duration"] as? TimeInterval, paywallInfo.productsLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$is_free_trial_available"] as! Bool, paywallInfo.isFreeTrialAvailable)
    XCTAssertEqual(result.parameters.eventParams["$product_id"] as! String, productId)
    XCTAssertEqual(result.parameters.eventParams["$product_identifier"] as! String, productId)
    XCTAssertNotNil(result.parameters.eventParams["$product_raw_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_alt"])
    XCTAssertNotNil(result.parameters.eventParams["$product_localized_period"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period"])
    XCTAssertNotNil(result.parameters.eventParams["$product_periodly"])
    XCTAssertNotNil(result.parameters.eventParams["$product_weekly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_daily_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_monthly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_yearly_price"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_days"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_weeks"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_months"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_years"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_text"])
    XCTAssertNotNil(result.parameters.eventParams["$product_trial_period_end_date"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_days"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_weeks"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_months"])
    XCTAssertNotNil(result.parameters.eventParams["$product_period_years"])
    XCTAssertNotNil(result.parameters.eventParams["$product_locale"])
    XCTAssertNotNil(result.parameters.eventParams["$product_language_code"])
    XCTAssertNotNil(result.parameters.eventParams["$product_currency_code"])
    XCTAssertNotNil(result.parameters.eventParams["$product_currency_symbol"])
    XCTAssertNotNil(result.parameters.eventParams["$primary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$secondary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$tertiary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
  }

  func test_paywallWebviewLoad_start() async {
    let paywallInfo: PaywallInfo = .stub()
    let result = await Superwall.shared.track(InternalSuperwallEvent.PaywallWebviewLoad(state: .start, paywallInfo: paywallInfo))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "paywallWebviewLoad_start")
    XCTAssertEqual(result.parameters.eventParams["$paywall_id"] as! String, paywallInfo.databaseId)
    XCTAssertEqual(result.parameters.eventParams["$paywalljs_version"] as? String, paywallInfo.paywalljsVersion)
    XCTAssertEqual(result.parameters.eventParams["$paywall_identifier"] as! String, paywallInfo.identifier)
    XCTAssertEqual(result.parameters.eventParams["$paywall_name"] as! String, paywallInfo.name)
    XCTAssertEqual(result.parameters.eventParams["$paywall_url"] as! String, paywallInfo.url.absoluteString)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_name"] as? String, paywallInfo.presentedByEventWithName)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_id"] as? String, paywallInfo.presentedByEventWithId)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_timestamp"] as? String, paywallInfo.presentedByEventAt)
    XCTAssertEqual(result.parameters.eventParams["$presented_by"] as! String, paywallInfo.presentedBy)
    XCTAssertEqual(result.parameters.eventParams["$paywall_product_ids"] as? String, paywallInfo.productIds.joined(separator: ","))
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_start_time"] as! String, paywallInfo.responseLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_complete_time"] as! String, paywallInfo.responseLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_duration"] as? TimeInterval, paywallInfo.responseLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_start_time"] as! String, paywallInfo.webViewLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_complete_time"] as! String, paywallInfo.webViewLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_duration"] as? TimeInterval, paywallInfo.webViewLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_start_time"] as! String, paywallInfo.productsLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_complete_time"] as! String, paywallInfo.productsLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_fail_time"] as! String, paywallInfo.productsLoadFailTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_duration"] as? TimeInterval, paywallInfo.productsLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$is_free_trial_available"] as! Bool, paywallInfo.isFreeTrialAvailable)
    XCTAssertNotNil(result.parameters.eventParams["$primary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$secondary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$tertiary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
  }

  func test_paywallWebviewLoad_fail() async {
    let paywallInfo: PaywallInfo = .stub()
    let result = await Superwall.shared.track(InternalSuperwallEvent.PaywallWebviewLoad(state: .fail, paywallInfo: paywallInfo))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "paywallWebviewLoad_fail")
    XCTAssertEqual(result.parameters.eventParams["$paywall_id"] as! String, paywallInfo.databaseId)
    XCTAssertEqual(result.parameters.eventParams["$paywalljs_version"] as? String, paywallInfo.paywalljsVersion)
    XCTAssertEqual(result.parameters.eventParams["$paywall_identifier"] as! String, paywallInfo.identifier)
    XCTAssertEqual(result.parameters.eventParams["$paywall_name"] as! String, paywallInfo.name)
    XCTAssertEqual(result.parameters.eventParams["$paywall_url"] as! String, paywallInfo.url.absoluteString)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_name"] as? String, paywallInfo.presentedByEventWithName)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_id"] as? String, paywallInfo.presentedByEventWithId)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_timestamp"] as? String, paywallInfo.presentedByEventAt)
    XCTAssertEqual(result.parameters.eventParams["$presented_by"] as! String, paywallInfo.presentedBy)
    XCTAssertEqual(result.parameters.eventParams["$paywall_product_ids"] as? String, paywallInfo.productIds.joined(separator: ","))
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_start_time"] as! String, paywallInfo.responseLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_complete_time"] as! String, paywallInfo.responseLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_duration"] as? TimeInterval, paywallInfo.responseLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_start_time"] as! String, paywallInfo.webViewLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_complete_time"] as! String, paywallInfo.webViewLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_duration"] as? TimeInterval, paywallInfo.webViewLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_start_time"] as! String, paywallInfo.productsLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_complete_time"] as! String, paywallInfo.productsLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_fail_time"] as! String, paywallInfo.productsLoadFailTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_duration"] as? TimeInterval, paywallInfo.productsLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$is_free_trial_available"] as! Bool, paywallInfo.isFreeTrialAvailable)
    XCTAssertNotNil(result.parameters.eventParams["$primary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$secondary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$tertiary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
  }

  func test_paywallWebviewLoad_complete() async {
    let paywallInfo: PaywallInfo = .stub()
    let result = await Superwall.shared.track(InternalSuperwallEvent.PaywallWebviewLoad(state: .complete, paywallInfo: paywallInfo))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "paywallWebviewLoad_complete")
    XCTAssertEqual(result.parameters.eventParams["$paywall_id"] as! String, paywallInfo.databaseId)
    XCTAssertEqual(result.parameters.eventParams["$paywalljs_version"] as? String, paywallInfo.paywalljsVersion)
    XCTAssertEqual(result.parameters.eventParams["$paywall_identifier"] as! String, paywallInfo.identifier)
    XCTAssertEqual(result.parameters.eventParams["$paywall_name"] as! String, paywallInfo.name)
    XCTAssertEqual(result.parameters.eventParams["$paywall_url"] as! String, paywallInfo.url.absoluteString)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_name"] as? String, paywallInfo.presentedByEventWithName)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_id"] as? String, paywallInfo.presentedByEventWithId)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_timestamp"] as? String, paywallInfo.presentedByEventAt)
    XCTAssertEqual(result.parameters.eventParams["$presented_by"] as! String, paywallInfo.presentedBy)
    XCTAssertEqual(result.parameters.eventParams["$paywall_product_ids"] as? String, paywallInfo.productIds.joined(separator: ","))
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_start_time"] as! String, paywallInfo.responseLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_complete_time"] as! String, paywallInfo.responseLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_duration"] as? TimeInterval, paywallInfo.responseLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_start_time"] as! String, paywallInfo.webViewLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_complete_time"] as! String, paywallInfo.webViewLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_duration"] as? TimeInterval, paywallInfo.webViewLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_start_time"] as! String, paywallInfo.productsLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_complete_time"] as! String, paywallInfo.productsLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_fail_time"] as! String, paywallInfo.productsLoadFailTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_duration"] as? TimeInterval, paywallInfo.productsLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$is_free_trial_available"] as! Bool, paywallInfo.isFreeTrialAvailable)
    XCTAssertNotNil(result.parameters.eventParams["$primary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$secondary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$tertiary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
  }

  func test_paywallWebviewLoad_timeout() async {
    let paywallInfo: PaywallInfo = .stub()
    let result = await Superwall.shared.track(InternalSuperwallEvent.PaywallWebviewLoad(state: .timeout, paywallInfo: paywallInfo))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "paywallWebviewLoad_timeout")
    XCTAssertEqual(result.parameters.eventParams["$paywall_id"] as! String, paywallInfo.databaseId)
    XCTAssertEqual(result.parameters.eventParams["$paywalljs_version"] as? String, paywallInfo.paywalljsVersion)
    XCTAssertEqual(result.parameters.eventParams["$paywall_identifier"] as! String, paywallInfo.identifier)
    XCTAssertEqual(result.parameters.eventParams["$paywall_name"] as! String, paywallInfo.name)
    XCTAssertEqual(result.parameters.eventParams["$paywall_url"] as! String, paywallInfo.url.absoluteString)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_name"] as? String, paywallInfo.presentedByEventWithName)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_id"] as? String, paywallInfo.presentedByEventWithId)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_timestamp"] as? String, paywallInfo.presentedByEventAt)
    XCTAssertEqual(result.parameters.eventParams["$presented_by"] as! String, paywallInfo.presentedBy)
    XCTAssertEqual(result.parameters.eventParams["$paywall_product_ids"] as? String, paywallInfo.productIds.joined(separator: ","))
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_start_time"] as! String, paywallInfo.responseLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_complete_time"] as! String, paywallInfo.responseLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_duration"] as? TimeInterval, paywallInfo.responseLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_start_time"] as! String, paywallInfo.webViewLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_complete_time"] as! String, paywallInfo.webViewLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_duration"] as? TimeInterval, paywallInfo.webViewLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_start_time"] as! String, paywallInfo.productsLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_complete_time"] as! String, paywallInfo.productsLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_fail_time"] as! String, paywallInfo.productsLoadFailTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_duration"] as? TimeInterval, paywallInfo.productsLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$is_free_trial_available"] as! Bool, paywallInfo.isFreeTrialAvailable)
    XCTAssertNotNil(result.parameters.eventParams["$primary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$secondary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$tertiary_product_id"])
  }

  func test_paywallProductsLoad_start() async {
    let paywallInfo: PaywallInfo = .stub()
    let eventData: EventData = .stub()
    let result = await Superwall.shared.track(InternalSuperwallEvent.PaywallProductsLoad(state: .start, paywallInfo: paywallInfo, eventData: eventData))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "paywallProductsLoad_start")
    XCTAssertTrue(result.parameters.eventParams["$is_triggered_from_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$paywall_id"] as! String, paywallInfo.databaseId)
    XCTAssertEqual(result.parameters.eventParams["$paywalljs_version"] as? String, paywallInfo.paywalljsVersion)
    XCTAssertEqual(result.parameters.eventParams["$paywall_identifier"] as! String, paywallInfo.identifier)
    XCTAssertEqual(result.parameters.eventParams["$paywall_name"] as! String, paywallInfo.name)
    XCTAssertEqual(result.parameters.eventParams["$paywall_url"] as! String, paywallInfo.url.absoluteString)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_name"] as? String, paywallInfo.presentedByEventWithName)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_id"] as? String, paywallInfo.presentedByEventWithId)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_timestamp"] as? String, paywallInfo.presentedByEventAt)
    XCTAssertEqual(result.parameters.eventParams["$presented_by"] as! String, paywallInfo.presentedBy)
    XCTAssertEqual(result.parameters.eventParams["$paywall_product_ids"] as? String, paywallInfo.productIds.joined(separator: ","))
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_start_time"] as! String, paywallInfo.responseLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_complete_time"] as! String, paywallInfo.responseLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_duration"] as? TimeInterval, paywallInfo.responseLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_start_time"] as! String, paywallInfo.webViewLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_complete_time"] as! String, paywallInfo.webViewLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_duration"] as? TimeInterval, paywallInfo.webViewLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_start_time"] as! String, paywallInfo.productsLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_complete_time"] as! String, paywallInfo.productsLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_fail_time"] as! String, paywallInfo.productsLoadFailTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_duration"] as? TimeInterval, paywallInfo.productsLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$is_free_trial_available"] as! Bool, paywallInfo.isFreeTrialAvailable)
    XCTAssertNotNil(result.parameters.eventParams["$primary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$secondary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$tertiary_product_id"])
  }

  func test_paywallProductsLoad_fail() async {
    let paywallInfo: PaywallInfo = .stub()
    let eventData: EventData = .stub()
    let result = await Superwall.shared.track(InternalSuperwallEvent.PaywallProductsLoad(state: .fail, paywallInfo: paywallInfo, eventData: eventData))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "paywallProductsLoad_fail")
    XCTAssertTrue(result.parameters.eventParams["$is_triggered_from_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$paywall_id"] as! String, paywallInfo.databaseId)
    XCTAssertEqual(result.parameters.eventParams["$paywalljs_version"] as? String, paywallInfo.paywalljsVersion)
    XCTAssertEqual(result.parameters.eventParams["$paywall_identifier"] as! String, paywallInfo.identifier)
    XCTAssertEqual(result.parameters.eventParams["$paywall_name"] as! String, paywallInfo.name)
    XCTAssertEqual(result.parameters.eventParams["$paywall_url"] as! String, paywallInfo.url.absoluteString)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_name"] as? String, paywallInfo.presentedByEventWithName)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_id"] as? String, paywallInfo.presentedByEventWithId)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_timestamp"] as? String, paywallInfo.presentedByEventAt)
    XCTAssertEqual(result.parameters.eventParams["$presented_by"] as! String, paywallInfo.presentedBy)
    XCTAssertEqual(result.parameters.eventParams["$paywall_product_ids"] as? String, paywallInfo.productIds.joined(separator: ","))
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_start_time"] as! String, paywallInfo.responseLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_complete_time"] as! String, paywallInfo.responseLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_duration"] as? TimeInterval, paywallInfo.responseLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_start_time"] as! String, paywallInfo.webViewLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_complete_time"] as! String, paywallInfo.webViewLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_duration"] as? TimeInterval, paywallInfo.webViewLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_start_time"] as! String, paywallInfo.productsLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_complete_time"] as! String, paywallInfo.productsLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_fail_time"] as! String, paywallInfo.productsLoadFailTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_duration"] as? TimeInterval, paywallInfo.productsLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$is_free_trial_available"] as! Bool, paywallInfo.isFreeTrialAvailable)
    XCTAssertNotNil(result.parameters.eventParams["$primary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$secondary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$tertiary_product_id"])
  }

  func test_paywallProductsLoad_complete() async {
    let paywallInfo: PaywallInfo = .stub()
    let eventData: EventData = .stub()
    let result = await Superwall.shared.track(InternalSuperwallEvent.PaywallProductsLoad(state: .complete, paywallInfo: paywallInfo, eventData: eventData))
    XCTAssertNotNil(result.parameters.eventParams["$app_session_id"])
    XCTAssertTrue(result.parameters.eventParams["$is_standard_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$event_name"] as! String, "paywallProductsLoad_complete")
    XCTAssertTrue(result.parameters.eventParams["$is_triggered_from_event"] as! Bool)
    XCTAssertEqual(result.parameters.eventParams["$paywall_id"] as! String, paywallInfo.databaseId)
    XCTAssertEqual(result.parameters.eventParams["$paywalljs_version"] as? String, paywallInfo.paywalljsVersion)
    XCTAssertEqual(result.parameters.eventParams["$paywall_identifier"] as! String, paywallInfo.identifier)
    XCTAssertEqual(result.parameters.eventParams["$paywall_name"] as! String, paywallInfo.name)
    XCTAssertEqual(result.parameters.eventParams["$paywall_url"] as! String, paywallInfo.url.absoluteString)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_name"] as? String, paywallInfo.presentedByEventWithName)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_id"] as? String, paywallInfo.presentedByEventWithId)
    XCTAssertEqual(result.parameters.eventParams["$presented_by_event_timestamp"] as? String, paywallInfo.presentedByEventAt)
    XCTAssertEqual(result.parameters.eventParams["$presented_by"] as! String, paywallInfo.presentedBy)
    XCTAssertEqual(result.parameters.eventParams["$paywall_product_ids"] as? String, paywallInfo.productIds.joined(separator: ","))
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_start_time"] as! String, paywallInfo.responseLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_complete_time"] as! String, paywallInfo.responseLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_response_load_duration"] as? TimeInterval, paywallInfo.responseLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_start_time"] as! String, paywallInfo.webViewLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_complete_time"] as! String, paywallInfo.webViewLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_webview_load_duration"] as? TimeInterval, paywallInfo.webViewLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_start_time"] as! String, paywallInfo.productsLoadStartTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_complete_time"] as! String, paywallInfo.productsLoadCompleteTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_fail_time"] as! String, paywallInfo.productsLoadFailTime)
    XCTAssertEqual(result.parameters.eventParams["$paywall_products_load_duration"] as? TimeInterval, paywallInfo.productsLoadDuration)
    XCTAssertEqual(result.parameters.eventParams["$is_free_trial_available"] as! Bool, paywallInfo.isFreeTrialAvailable)
    XCTAssertNotNil(result.parameters.eventParams["$primary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$secondary_product_id"])
    XCTAssertNotNil(result.parameters.eventParams["$tertiary_product_id"])
  }
}
