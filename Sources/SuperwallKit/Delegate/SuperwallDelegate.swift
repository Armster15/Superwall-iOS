//
//  File.swift
//  
//
//  Created by Jake Mor on 10/5/21.
//

import Foundation

/// The objective-c only delegate protocol that handles Superwall lifecycle events.
///
/// The delegate methods receive callbacks from the SDK in response to certain events that happen on the paywall.
/// It contains some required and some optional methods. To learn how to conform to the delegate in your app and
/// best practices, see <doc:GettingStarted>.
@MainActor
@objc(SWKSuperwallDelegate)
public protocol SuperwallDelegate: AnyObject {
  /// Called when the user taps a button on your paywall that has a `data-pw-custom` tag attached.
  ///
  /// To learn more about using this function, see <doc:CustomPaywallButtons>. To learn about the types of tags that
  /// can be attached to elements on your paywall, see [Data Tags](https://docs.superwall.com/docs/data-tags).
  ///
  ///  - Parameter name: The value of the `data-pw-custom` tag in your HTML element that the user selected.
  @objc optional func handleCustomPaywallAction(withName name: String)

  /// Called right before the paywall is dismissed.
  @objc optional func willDismissPaywall()

  /// Called right before the paywall is presented.
  @objc optional func willPresentPaywall()

  /// Called right after the paywall is dismissed.
  @objc optional func didDismissPaywall()

  /// Called right after the paywall is presented.
  @objc optional func didPresentPaywall()

  /// Called when the user opens a URL by selecting an element on your paywall that has a `data-pw-open-url` tag.
  ///
  /// - Parameter url: The URL to open
  @objc optional func willOpenURL(url: URL)

  /// Called when the user taps a deep link in your paywall.
  ///
  /// - Parameter url: The deep link URL to open
  @objc optional func willOpenDeepLink(url: URL)

  /// Called whenever an internal analytics event is tracked.
  ///
  /// Use this method when you want to track internal analytics events in your own analytics.
  ///
  /// You can switch over `info.event` for a list of possible cases. See <doc:SuperwallEvents> for more info.
  ///
  /// - Parameter info: A `SuperwallEventInfo` object containing an `event` and a `params` parameter.
  @objc optional func didTrackSuperwallEventInfo(_ info: SuperwallEventInfo)

  /// Receive all the log messages generated by the SDK.
  ///
  /// - Parameters:
  ///   - level: Specifies the detail of the logs returned from the SDK to the console.
  ///   Can be either `DEBUG`, `INFO`, `WARN`, or `ERROR`, as defined by ``LogLevel``.
  ///   - scope: The possible scope of logs to print to the console, as defined by ``LogScope``.
  ///   - message: The message associated with the log.
  ///   - info: A dictionary of information associated with the log.
  ///   - error: The error associated with the log.
  @objc optional func handleLog(
    level: String,
    scope: String,
    message: String?,
    info: [String: Any]?,
    error: Swift.Error?
  )
}
