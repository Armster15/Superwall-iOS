//
//  File.swift
//  
//
//  Created by Yusuf TÃ¶r on 06/01/2023.
//

import Foundation

/// The delegate protocol that handles Superwall lifecycle events.
///
/// The delegate methods receive callbacks from the SDK in response to certain events that happen on the paywall.
/// It contains some required and some optional methods. To learn how to conform to the delegate in your app
/// and best practices, see <doc:GettingStarted>.
public protocol SuperwallDelegate: AnyObject {
  func subscriptionController() -> SubscriptionController?

  /// Called when the user taps an element on your paywall that has the click action `Custom action`,
  /// or a `data-pw-custom` tag attached.
  ///
  /// To learn more about using this function, see <doc:CustomPaywallButtons>. To learn about the types of tags that can
  /// be attached to elements on your paywall, see [Data Tags](https://docs.superwall.com/docs/data-tags).
  ///
  ///  - Parameter name: The value of the `data-pw-custom` tag in your HTML element that the user selected.
  @MainActor
  func handleCustomPaywallAction(withName name: String)

  /// Called right before the paywall is dismissed.
  @MainActor
  func willDismissPaywall()

  /// Called right before the paywall is presented.
  @MainActor
  func willPresentPaywall()

  /// Called right after the paywall is dismissed.
  @MainActor
  func didDismissPaywall()

  /// Called right after the paywall is presented.
  @MainActor
  func didPresentPaywall()

  /// Called when the user opens a URL by selecting an element on your paywall that has a `data-pw-open-url` tag.
  ///
  /// - Parameter url: The URL to open
  @MainActor
  func willOpenURL(url: URL)

  /// Called when the user taps a deep link in your paywall.
  ///
  /// - Parameter url: The deep link URL to open
  @MainActor
  func willOpenDeepLink(url: URL)

  /// Called whenever an internal analytics event is tracked.
  ///
  /// Use this method when you want to track internal analytics events in your own analytics.
  ///
  /// You can switch over `info.event` for a list of possible cases. See <doc:SuperwallEvents> for more info.
  ///
  /// - Parameter info: A `SuperwallEventInfo` object containing an `event` and a `params` parameter.
  @MainActor
  func didTrackSuperwallEventInfo(_ info: SuperwallEventInfo)

  /// Receive all the log messages generated by the SDK.
  ///
  /// - Parameters:
  ///   - level: Specifies the detail of the logs returned from the SDK to the console.
  ///   Can be either `DEBUG`, `INFO`, `WARN`, or `ERROR`, as defined by ``LogLevel``.
  ///   - scope: The possible scope of logs to print to the console, as defined by ``LogScope``.
  ///   - message: The message associated with the log.
  ///   - info: A dictionary of information associated with the log.
  ///   - error: The error associated with the log.
  @MainActor
  func handleLog(
    level: String,
    scope: String,
    message: String?,
    info: [String: Any]?,
    error: Swift.Error?
  )
}

public extension SuperwallDelegate {
  func subscriptionController() -> SubscriptionController? {
    return nil
  }

  func handleCustomPaywallAction(withName name: String) {}

  func willDismissPaywall() {}

  func willPresentPaywall() {}

  func didDismissPaywall() {}

  func didPresentPaywall() {}

  func willOpenURL(url: URL) {}

  func willOpenDeepLink(url: URL) {}

  func didTrackSuperwallEventInfo(_ info: SuperwallEventInfo) {}

  func handleLog(
    level: String,
    scope: String,
    message: String?,
    info: [String: Any]?,
    error: Swift.Error?
  ) {}
}
