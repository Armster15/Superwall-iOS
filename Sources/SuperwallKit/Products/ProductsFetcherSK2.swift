//
//  File.swift
//  
//
//  Created by Yusuf TÃ¶r on 06/12/2022.
//

import Foundation
import StoreKit

@available(iOS 15.0, tvOS 15.0, watchOS 8.0, *)
actor ProductsFetcherSK2: ProductsFetcher {
  // TODO: Make the key such that when an incoming request has at least one of the products in a set, it waits rather than creating a new task. E.g. If abc is already running but a comes in, it doesn't create a new request
  private var activeTasks: [Set<String>: Task<Set<StoreProduct>, Error>] = [:]
  private var productsByHash: [Set<String>: Set<StoreProduct>] = [:]

  /// Gets the StoreKit 2 products from the provided set of identifiers.
  ///
  /// - Parameters:
  ///   - identifiers: A `Set` of product identifiers.
  ///
  /// - Returns: A `Set` of `StoreProducts` .
  /// - Throws: An error generated by StoreKit if it couldn't retrieve the products.
  func products(identifiers: Set<String>) async throws -> Set<StoreProduct> {
    // Check if products already exist.
    if let products = productsByHash[identifiers] {
      return products
    }

    // Check if there's an existing task retrieving the products.
    if let existingTask = activeTasks[identifiers] {
      return try await existingTask.value
    }

    // Create new task
    let task = Task<Set<StoreProduct>, Error> {
      do {
        // Get the products from storekit.
        let products = try await StoreKit.Product.products(for: identifiers)
        let storeProducts = Set(products.map { StoreProduct.from(product: SK2StoreProduct(sk2Product: $0)) })

        productsByHash[identifiers] = storeProducts
        activeTasks[identifiers] = nil
        return storeProducts
      } catch {
        activeTasks[identifiers] = nil
        throw error
      }
    }

    activeTasks[identifiers] = task

    return try await task.value
  }
}
